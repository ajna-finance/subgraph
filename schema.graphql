# TODO: add list of pools deployed by the factory
type ERC20PoolFactory @entity {
  # factory address
  id: Bytes!
  # number of pools deployed by the factory
  poolCount: BigInt!
  # total number of transactions sent to the factory
  txCount: BigInt!
}

# TODO: add colllateralization information
type Pool @entity {
  # pool address
  id: Bytes!
  # block pool was created at
  createdAtBlockNumber: BigInt!
  # creation timestamp
  createdAtTimestamp: BigInt!
  # address of the pool's collateral token
  collateralToken: Bytes!
  # address of the pool's quote token
  quoteToken: Bytes!
  # pool's current highest threshold price
  htp: BigDecimal!
  # pool's current lowest utilized price
  lup: BigDecimal!
  # current total debt in the pool
  currentDebt: BigInt!
  # current reserves contractQuoteBalance + poolDebt - pool.depositSize()
  currentReserves: BigInt!
  # current total quote token deposits in the pool
  totalDeposits: BigInt!
  # target utilization rate
  targetUtilization: BigDecimal!
  # total number of transactions sent to the pool
  txCount: BigInt!
}

type Bucket @entity {
  # bucket id: $poolAddress + '#' + $bucketIndex
  id: Bytes!
  # bucket index
  bucketIndex: BigInt!
  # current exchange rate of the bucket
  exchangeRate: BigInt!
  # pool address
  poolAddress: String!
  # total collateral available in the bucket
  collateral: BigInt
  # total quote tokens deposited in the bucket
  deposit: BigInt!
  # total LP for all lenders in the bucket
  lpb: BigInt!
}

# lend occurs per bucket in a pool
type Lend @entity {
  # Lend id: $bucketId + '|' + $accountId
  id: Bytes!
  # bucket to which a lend was made
  bucket: Bucket!
  # pool address
  poolAddress: String!
  # pool pointer
  pool: Pool!
  # quote token deposited in the bucket by the lender
  deposit: BigInt!
  # LPB in the bucket accrued to lender
  lpb: BigInt!
  # quote equivalent value of the lend's LPB in the bucket
  lpbValueInQuote: BigInt!
}

type Loan @entity {
  # Loan id: $poolAddress + '|' + $borrowerId
  id: Bytes!
  # pool address
  poolAddress: String!
  # pool pointer
  pool: Pool!
  # collateral tokens deposited in a pool by the borrower
  collateralDeposited: BigInt!
  # collateralization of the borrow position in the pool
  collateralization: BigInt!
  # total quote drawn from the pool in the loan
  debt: BigInt!
  # borrowers highest threshold price
  htp: BigInt!
}

type Account @entity {
  # address of the account
  id: Bytes!
  # list of pools in which an account is present
  pools: [Pool!]!

  # kicks executed by the account
  kicks: [Kick!]!
  # buckets in a pool to which the account has lent quote
  lends: [Lend!]!
  loans: [Loan!]!
  settles: [Settle!]!
  takes: [Take!]!

  # total number of transactions sent by the account
  txCount: BigInt!
}

  # # # # # #
  # EVENTS  #
  # # # # # #

type AddCollateral @entity(immutable: true) {
  id: Bytes!
  actor: Bytes! # address
  price: BigInt! # uint256
  amount: BigInt! # uint256
  lpAwarded: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddQuoteToken @entity {
  id: Bytes!
  bucket: Bucket!    # Bucket to which quote was added
  pool: Pool!        # Pool to which quote was added
  lender: Bytes!     # address
  price: BigInt!     # uint256
  amount: BigInt!    # uint256
  lpAwarded: BigInt! # uint256
  lup: BigInt!       # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionNFTSettle @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  collateral: BigInt! # uint256
  lps: BigInt! # uint256
  index: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionSettle @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  collateral: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BucketBankruptcy @entity(immutable: true) {
  id: Bytes!
  index: BigInt! # uint256
  lpForfeited: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BucketTake @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  index: BigInt! # uint256
  amount: BigInt! # uint256
  collateral: BigInt! # uint256
  bondChange: BigInt! # uint256
  isReward: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BucketTakeLPAwarded @entity(immutable: true) {
  id: Bytes!
  taker: Bytes! # address
  kicker: Bytes! # address
  lpAwardedTaker: BigInt! # uint256
  lpAwardedKicker: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DrawDebt @entity(immutable: true) {
  id: Bytes!
  pool: Pool! # Pool debt was drawn from
  borrower: Bytes! # address
  amountBorrowed: BigInt! # uint256
  collateralPledged: BigInt! # uint256
  lup: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Kick @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  debt: BigInt! # uint256
  collateral: BigInt! # uint256
  bond: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MoveQuoteToken @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  from: BigInt! # uint256
  to: BigInt! # uint256
  amount: BigInt! # uint256
  lpRedeemedFrom: BigInt! # uint256
  lpAwardedTo: BigInt! # uint256
  lup: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveCollateral @entity(immutable: true) {
  id: Bytes!
  claimer: Bytes! # address
  price: BigInt! # uint256
  amount: BigInt! # uint256
  lpRedeemed: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveQuoteToken @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  price: BigInt! # uint256
  amount: BigInt! # uint256
  lpRedeemed: BigInt! # uint256
  lup: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RepayDebt @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  quoteRepaid: BigInt! # uint256
  collateralPulled: BigInt! # uint256
  lup: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReserveAuction @entity(immutable: true) {
  id: Bytes!
  claimableReservesRemaining: BigInt! # uint256
  auctionPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Settle @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  settledDebt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Take @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  amount: BigInt! # uint256
  collateral: BigInt! # uint256
  bondChange: BigInt! # uint256
  isReward: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferLPTokens @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  newOwner: Bytes! # address
  indexes: [BigInt!]! # uint256[]
  lpTokens: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateInterestRate @entity(immutable: true) {
  id: Bytes!
  oldRate: BigInt! # uint256
  newRate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Burn @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MemorializePosition @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Mint @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  pool: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MoveLiquidity @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RedeemPosition @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type PoolCreated @entity(immutable: true) {
  id: Bytes!
  pool_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ClaimRewards @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  ajnaPool: Bytes! # address
  tokenId: BigInt! # uint256
  epochsClaimed: [BigInt!]! # uint256[]
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Stake @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  ajnaPool: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unstake @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  ajnaPool: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateExchangeRates @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  ajnaPool: Bytes! # address
  indexesUpdated: [BigInt!]! # uint256[]
  rewardsClaimed: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ERC721PoolFactoryPoolCreated @entity(immutable: true) {
  id: Bytes!
  pool_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
