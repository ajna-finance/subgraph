# TODO: finish expanding this schema -> ERC20 / ERC721?
# this supports both ERC20 and ERC721 tokens, as union type's aren't currently supported
type Token @entity {
  # token address
  id: Bytes!
  # token symbol
  symbol: String!
  # token name
  name: String!
  # token decimals
  decimals: BigInt!
  # flag for whether the token is an ERC721
  isERC721: Boolean!
  # number of pools including this token
  poolCount: BigInt!
  # transactions across all pools that include this token
  txCount: BigInt!
}

type ERC20PoolFactory @entity {
  # factory address
  id: Bytes!
  # number of pools deployed by the factory
  poolCount: BigInt!
  # list of pools deployed by the factory
  pools: [Pool!]!
  # total number of transactions sent to the factory
  txCount: BigInt!
}

# TODO: add momp
# TODO: add burn information and total interst earned info
type Pool @entity {
  # pool address
  id: Bytes!
  # block pool was created at
  createdAtBlockNumber: BigInt!
  # creation timestamp
  createdAtTimestamp: BigInt!
  # address of the pool's collateral token
  collateralToken: Token!
  # address of the pool's quote token
  quoteToken: Token!
  # fee rate of the pool
  feeRate: BigDecimal!
  # current total debt in the pool
  currentDebt: BigDecimal!
  # current pool inflator snapshot
  inflator: BigDecimal!
  # block timestamp at which the inflator was last updated
  inflatorUpdate: BigInt!
  # total collateral pledged to the pool
  pledgedCollateral: BigDecimal!
  # total number of transactions sent to the pool
  txCount: BigInt!

  # LOANS INFORMATION
  poolSize: BigDecimal! # total amount of quote tokens in the pool
  loansCount: BigInt! # total number of loans in the pool
  maxBorrower: Bytes! # address of the borrower with the highest TP in the pool
  pendingInflator: BigDecimal! # pending inflator value
  pendingInterestFactor: BigDecimal! # pending interest factor used to scale the inflator

  # PRICES INFORMATION
  hpb: BigDecimal! # current highest price bucket
  hpbIndex: BigInt! # current highest price bucket index
  htp: BigDecimal! # current highest threshold price
  htpIndex: BigInt! # current highest threshold price index
  lup: BigDecimal! # current lowest utilized price
  lupIndex: BigInt! # current lowest utilized price index

  # RESERVES INFORMATION
  # current reserves contractQuoteBalance + poolDebt - pool.depositSize()
  reserves: BigDecimal!
  # current pool claimable reserves
  claimableReserves: BigDecimal!
  # remaining claimable reserves not yet taken
  claimableReservesRemaining: BigDecimal!
  # current reserve auction auctionPrice
  reserveAuctionPrice: BigDecimal!
  # current reserve auction timeRemaining
  reserveAuctionTimeRemaining: BigInt!

  # UTILIZATION INFORMATION
  # current pool minimum debt amount for a new borrow
  minDebtAmount: BigDecimal!
  # current pool collateralization ratio across all borrowers
  collateralization: BigDecimal!
  # current pool utilization across all borrowers
  actualUtilization: BigDecimal!
  # current pool target utilization rate
  targetUtilization: BigDecimal!

  # LIQUIDATION INFORMATION
  totalBondEscrowed: BigDecimal! # total bond escrowed in the pool
  liquidationAuctions: [LiquidationAuction!]! # list of liquidation auctions in the pool
  # TODO: add liquidations head and tail
}

type Bucket @entity {
  # bucket id: $poolAddress + '#' + $bucketIndex
  id: Bytes!
  # bucket index
  bucketIndex: BigInt!
  # current exchange rate of the bucket
  exchangeRate: BigDecimal!
  # pool address
  poolAddress: String!
  # total collateral available in the bucket
  collateral: BigDecimal!
  # total quote tokens deposited in the bucket, inclusive of interest
  quoteTokens: BigDecimal!
  # total LP for all lenders in the bucket
  lpb: BigDecimal!
}

# lend occurs per bucket in a pool
type Lend @entity {
  # Lend id: $bucketId + '|' + $accountId
  id: Bytes!
  # bucket to which a lend was made
  bucket: Bucket!
  # pool address
  poolAddress: String!
  # address of the lender
  lender: Bytes!
  # pool pointer
  pool: Pool!
  # quote token deposited in the bucket by the lender
  deposit: BigDecimal!
  # LPB in the bucket accrued to lender
  lpb: BigDecimal!
  # quote equivalent value of the lend's LPB in the bucket
  lpbValueInQuote: BigDecimal!
}

# each borrower has only one loan with a pool
type Loan @entity {
  # Loan id: $poolAddress + '|' + $borrowerId
  id: Bytes!
  # pool address
  poolAddress: String!
  # borrower address
  borrower: Bytes!
  # pool pointer
  pool: Pool!
  # boolean indicating whether the loan is in liquidations
  inLiquidation: Boolean!
  # collateral tokens deposited in a pool by the borrower
  collateralDeposited: BigDecimal!
  # collateralization of the borrow position in the pool
  collateralization: BigDecimal!
  # total quote drawn from the pool in the loan
  debt: BigDecimal!
  # borrowers threshold price
  tp: BigDecimal!
}

type Account @entity {
  # address of the account
  id: Bytes!
  # list of pools in which an account is present
  pools: [Pool!]!

  # kicks executed by the account
  kicks: [Kick!]!
  # buckets in a pool to which the account has lent quote
  lends: [Lend!]!
  # loans which the account has taken from pools
  loans: [Loan!]!
  settles: [Settle!]!
  takes: [Take!]!

  # total number of transactions sent by the account
  txCount: BigInt!
}

type LiquidationAuction @entity {
  id: Bytes! # $poolAddress + '|' + $loanId
  pool: Pool! # pool in which the liquidation occurred
  borrower: Bytes! # address of the borrower being liquidated
  loan: Loan! # loan being liquidated
  kicker: Bytes! # address of the kicker
  kick: Kick! # kick which triggered the liquidation
  kickTime: BigInt! # block timestamp at which the kick was executed
  bondSize: BigDecimal! # bond provided by kicker to initate auction
  bondFactor: BigDecimal! # bond factor determining the reward or penalty for the kicker
  neutralPrice: BigDecimal! # price at which the auction is neutral
}

  # # # # # #
  # EVENTS  #
  # # # # # #

type AddCollateral @entity(immutable: true) {
  id: Bytes!
  pool: Pool! # Pool whose bucket was modified
  bucket: Bucket! # Bucket to which collateral was added
  actor: Bytes! # address
  price: BigInt! # uint256
  amount: BigInt! # uint256
  lpAwarded: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AddQuoteToken @entity {
  id: Bytes!
  bucket: Bucket!    # Bucket to which quote was added
  pool: Pool!        # Pool to which quote was added
  lender: Bytes!     # address
  price: BigInt!     # uint256
  amount: BigInt!    # uint256
  lpAwarded: BigInt! # uint256
  lup: BigInt!       # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionNFTSettle @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  collateral: BigInt! # uint256
  lps: BigInt! # uint256
  index: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionSettle @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  collateral: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BucketBankruptcy @entity(immutable: true) {
  id: Bytes!
  index: BigInt! # uint256
  lpForfeited: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BucketTake @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  index: BigInt! # uint256
  amount: BigInt! # uint256
  collateral: BigInt! # uint256
  bondChange: BigInt! # uint256
  isReward: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BucketTakeLPAwarded @entity(immutable: true) {
  id: Bytes!
  taker: Bytes! # address
  kicker: Bytes! # address
  lpAwardedTaker: BigInt! # uint256
  lpAwardedKicker: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DrawDebt @entity(immutable: true) {
  id: Bytes!
  pool: Pool! # Pool debt was drawn from
  borrower: Bytes! # address
  amountBorrowed: BigInt! # uint256
  collateralPledged: BigInt! # uint256
  lup: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# TODO: add claimable and locked fields
type Kick @entity(immutable: true) {
  id: Bytes!
  kicker: Bytes! # address of the kicker
  kickMomp: BigDecimal! # pool MOMP at the time of kicking
  pool: Pool! # Pool in which a kick occurred
  loan: Loan! # Loan which was kicked
  liquidationAuction: LiquidationAuction! # Liquidation auction which was initiated
  borrower: Bytes! # address of the borrower being liquidated
  debt: BigInt! # uint256
  collateral: BigInt! # uint256
  bond: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MoveQuoteToken @entity(immutable: true) {
  id: Bytes!
  pool: Pool! # Pool in which quote tokens were moved
  lender: Bytes! # address
  from: Bucket! # bucket quote token was moved from
  to: Bucket! # bucket quote token was moved to
  amount: BigInt! # uint256
  lpRedeemedFrom: BigInt! # uint256
  lpAwardedTo: BigInt! # uint256
  lup: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveCollateral @entity(immutable: true) {
  id: Bytes!
  claimer: Bytes! # address
  price: BigInt! # uint256
  amount: BigInt! # uint256
  lpRedeemed: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemoveQuoteToken @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  price: BigInt! # uint256
  amount: BigInt! # uint256
  lpRedeemed: BigInt! # uint256
  lup: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RepayDebt @entity(immutable: true) {
  id: Bytes!
  pool: Pool! # Pool debt was repaid to
  borrower: Bytes! # address
  quoteRepaid: BigInt! # uint256
  collateralPulled: BigInt! # uint256
  lup: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReserveAuction @entity(immutable: true) {
  id: Bytes!
  claimableReservesRemaining: BigInt! # uint256
  auctionPrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Settle @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  settledDebt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Take @entity(immutable: true) {
  id: Bytes!
  taker: Bytes! # address of the taker
  pool: Pool! # Pool in which the take occurred
  borrower: Bytes! # address of the borrower being liquidated
  liquidationAuction: LiquidationAuction! # Liquidation auction which was taken
  loan: Loan! # Loan which was taken
  amount: BigInt! # uint256
  collateral: BigInt! # uint256
  bondChange: BigInt! # uint256
  isReward: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferLPTokens @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  newOwner: Bytes! # address
  indexes: [BigInt!]! # uint256[]
  lpTokens: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateInterestRate @entity(immutable: true) {
  id: Bytes!
  oldRate: BigInt! # uint256
  newRate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Burn @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MemorializePosition @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Mint @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  pool: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MoveLiquidity @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RedeemPosition @entity(immutable: true) {
  id: Bytes!
  lender: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type PoolCreated @entity(immutable: true) {
  id: Bytes!
  pool_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ClaimRewards @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  ajnaPool: Bytes! # address
  tokenId: BigInt! # uint256
  epochsClaimed: [BigInt!]! # uint256[]
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Stake @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  ajnaPool: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unstake @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  ajnaPool: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateExchangeRates @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  ajnaPool: Bytes! # address
  indexesUpdated: [BigInt!]! # uint256[]
  rewardsClaimed: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ERC721PoolFactoryPoolCreated @entity(immutable: true) {
  id: Bytes!
  pool_: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
